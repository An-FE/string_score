This is the fastest javascript string scoring plugin that I am aware of.  I have taken great joy in squeezing every millisecond I can out of this script.  If you are aware of any ways to improve this script, please let me know.

Using the benchmarks provided in the project string_score is faster then liquidmetal.js & quicksilver.js:
1) string_score.js: 246.8ms
2) liquidmetal.js:  790.6ms
3) quicksilver.js:  1910.4ms
** tests run in FireFox 3.5b4 with 4000 iterations of the benchmark tests included


This javascript will score a string against another string. It began as a rewrite of A port of the Quicksilver string ranking algorithm (quicksilver.js aka qs_score.js).  The final product only contains a few characters from the original algorithm

Examples: (results are for example only... I may change the scoring algorithm without updating examples)
========
"hello world".score("axl") //=> 0
"hello world".score("ow")  //=> 0.18181818181818182 

"hello world".score("h")           //=>0.09090909090909091
"hello world".score("he")          //=>0.18181818181818182
"hello world".score("hel")         //=>0.2727272727272727
"hello world".score("hell")        //=>0.36363636363636365
"hello world".score("hello")       //=>0.45454545454545453
...
"hello world".score("helloworld")  //=>0.90909090909090913
"hello world".score("hello worl")  //=>0.9090909090909091
"hello world".score("hello world") //=> 1

'Hello'.score('h') //=>0.13999999999999999
'He'.score('h')    //=>0.35

// Same case matches better then wrong case
'Hello'.score('h') //=>0.13999999999999999
'Hello'.score('H') //=>0.2

// Acronym are given more weight
"Hillsdale Michigan".score("HiMi") > "Hillsdale Michigan".score("Hills")
"Hillsdale Michigan".score("Hillsd") >"Hillsdale Michigan".score("HiMi")



Benchmarks & Tested Browsers
============================
Tested & working in:                 
Firefox 3 & 3.5beta (Mac & Windows)  
Safari 4 (Mac & Windows)             
IE: 7 (Windows)                      
Chrome: 2 (Windows)                  
Opera: 9.64 (Windows)                
** IE 7 fails (stop running this script message) with 4000 iterations of the benchmark test. All other browsers tested survived this test, and in fact survive a larger number of iterations.  The benchmark that is causing IE to choke is: 4000 iterations of 446 character string scoring a 70 character match


Notes
=====
string_score.js does not have any external dependencies other then a reasonably new browser.

The tests located in the tests folder relies the files located in the tests folder.

Please share your testing results with me if you are able to test under an unlisted browser.




TODO: 
- Add configuration parameters to control scoring weights.
- Update tests to all have messages and sync tests to compairsons
- Update tests to be more story like to ensure good coverage.
